//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/AdwWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceAddress")]
    public interface IServiceAddress {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/CkSenzaImpersonation", ReplyAction="http://tempuri.org/IServiceAddress/CkSenzaImpersonationResponse")]
        string CkSenzaImpersonation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/CkSenzaImpersonation", ReplyAction="http://tempuri.org/IServiceAddress/CkSenzaImpersonationResponse")]
        System.Threading.Tasks.Task<string> CkSenzaImpersonationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/CkImpersonationOptionRequired", ReplyAction="http://tempuri.org/IServiceAddress/CkImpersonationOptionRequiredResponse")]
        string CkImpersonationOptionRequired();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/CkImpersonationOptionRequired", ReplyAction="http://tempuri.org/IServiceAddress/CkImpersonationOptionRequiredResponse")]
        System.Threading.Tasks.Task<string> CkImpersonationOptionRequiredAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/CkImpersonationOptionAllowed", ReplyAction="http://tempuri.org/IServiceAddress/CkImpersonationOptionAllowedResponse")]
        string CkImpersonationOptionAllowed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/CkImpersonationOptionAllowed", ReplyAction="http://tempuri.org/IServiceAddress/CkImpersonationOptionAllowedResponse")]
        System.Threading.Tasks.Task<string> CkImpersonationOptionAllowedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/CkImpersonationOptionNotAllowed", ReplyAction="http://tempuri.org/IServiceAddress/CkImpersonationOptionNotAllowedResponse")]
        string CkImpersonationOptionNotAllowed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/CkImpersonationOptionNotAllowed", ReplyAction="http://tempuri.org/IServiceAddress/CkImpersonationOptionNotAllowedResponse")]
        System.Threading.Tasks.Task<string> CkImpersonationOptionNotAllowedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetForStaff", ReplyAction="http://tempuri.org/IServiceAddress/GetForStaffResponse")]
        string GetForStaff();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetForStaff", ReplyAction="http://tempuri.org/IServiceAddress/GetForStaffResponse")]
        System.Threading.Tasks.Task<string> GetForStaffAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetForController", ReplyAction="http://tempuri.org/IServiceAddress/GetForControllerResponse")]
        string GetForController();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetForController", ReplyAction="http://tempuri.org/IServiceAddress/GetForControllerResponse")]
        System.Threading.Tasks.Task<string> GetForControllerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetMsgSwitchBetweenGroup", ReplyAction="http://tempuri.org/IServiceAddress/GetMsgSwitchBetweenGroupResponse")]
        string GetMsgSwitchBetweenGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetMsgSwitchBetweenGroup", ReplyAction="http://tempuri.org/IServiceAddress/GetMsgSwitchBetweenGroupResponse")]
        System.Threading.Tasks.Task<string> GetMsgSwitchBetweenGroupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetInfoAutentication", ReplyAction="http://tempuri.org/IServiceAddress/GetInfoAutenticationResponse")]
        string GetInfoAutentication();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetInfoAutentication", ReplyAction="http://tempuri.org/IServiceAddress/GetInfoAutenticationResponse")]
        System.Threading.Tasks.Task<string> GetInfoAutenticationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetFirstAddressLine1", ReplyAction="http://tempuri.org/IServiceAddress/GetFirstAddressLine1Response")]
        string GetFirstAddressLine1();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetFirstAddressLine1", ReplyAction="http://tempuri.org/IServiceAddress/GetFirstAddressLine1Response")]
        System.Threading.Tasks.Task<string> GetFirstAddressLine1Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetData", ReplyAction="http://tempuri.org/IServiceAddress/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetData", ReplyAction="http://tempuri.org/IServiceAddress/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IServiceAddress/GetDataUsingDataContractResponse")]
        Client.ServiceReference1.CompositeType GetDataUsingDataContract(Client.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAddress/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IServiceAddress/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference1.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceAddressChannel : Client.ServiceReference1.IServiceAddress, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceAddressClient : System.ServiceModel.ClientBase<Client.ServiceReference1.IServiceAddress>, Client.ServiceReference1.IServiceAddress {
        
        public ServiceAddressClient() {
        }
        
        public ServiceAddressClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceAddressClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAddressClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAddressClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CkSenzaImpersonation() {
            return base.Channel.CkSenzaImpersonation();
        }
        
        public System.Threading.Tasks.Task<string> CkSenzaImpersonationAsync() {
            return base.Channel.CkSenzaImpersonationAsync();
        }
        
        public string CkImpersonationOptionRequired() {
            return base.Channel.CkImpersonationOptionRequired();
        }
        
        public System.Threading.Tasks.Task<string> CkImpersonationOptionRequiredAsync() {
            return base.Channel.CkImpersonationOptionRequiredAsync();
        }
        
        public string CkImpersonationOptionAllowed() {
            return base.Channel.CkImpersonationOptionAllowed();
        }
        
        public System.Threading.Tasks.Task<string> CkImpersonationOptionAllowedAsync() {
            return base.Channel.CkImpersonationOptionAllowedAsync();
        }
        
        public string CkImpersonationOptionNotAllowed() {
            return base.Channel.CkImpersonationOptionNotAllowed();
        }
        
        public System.Threading.Tasks.Task<string> CkImpersonationOptionNotAllowedAsync() {
            return base.Channel.CkImpersonationOptionNotAllowedAsync();
        }
        
        public string GetForStaff() {
            return base.Channel.GetForStaff();
        }
        
        public System.Threading.Tasks.Task<string> GetForStaffAsync() {
            return base.Channel.GetForStaffAsync();
        }
        
        public string GetForController() {
            return base.Channel.GetForController();
        }
        
        public System.Threading.Tasks.Task<string> GetForControllerAsync() {
            return base.Channel.GetForControllerAsync();
        }
        
        public string GetMsgSwitchBetweenGroup() {
            return base.Channel.GetMsgSwitchBetweenGroup();
        }
        
        public System.Threading.Tasks.Task<string> GetMsgSwitchBetweenGroupAsync() {
            return base.Channel.GetMsgSwitchBetweenGroupAsync();
        }
        
        public string GetInfoAutentication() {
            return base.Channel.GetInfoAutentication();
        }
        
        public System.Threading.Tasks.Task<string> GetInfoAutenticationAsync() {
            return base.Channel.GetInfoAutenticationAsync();
        }
        
        public string GetFirstAddressLine1() {
            return base.Channel.GetFirstAddressLine1();
        }
        
        public System.Threading.Tasks.Task<string> GetFirstAddressLine1Async() {
            return base.Channel.GetFirstAddressLine1Async();
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public Client.ServiceReference1.CompositeType GetDataUsingDataContract(Client.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
